<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AdmPwd.PDSWrapper</name>
    </assembly>
    <members>
        <member name="T:AdmPwd.PDSUtils.PdsWrapper">
            <summary>
            Wrapper class that exposes PDS interface for client applications and implements PDS autodiscovery and fault tolerance according to configuration distributed by Group Policy
            </summary>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetPDS">
            <summary>
      Returns list of PDS discovered either form DNS or from GPO
    </summary><returns>Returns list of PDS instances discovered</returns><remarks>
      <para>No specific permissions required</para>
      <para>Call is not audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetSupportedForest(AdmPwd.Types.PdsEndpoint)">
            <summary>
      Calls PDS to get list of supported forests as configured in PDS configuration file.
    </summary><param name="Pds">
      Identifies PDS instance to query list of supported forests.
    </param><returns>List of names of AD forests as known by given PDS instance (optionaly with connection credentials and id of enryption key that is used to protect them is configuration file), or null if no specific AD forests are configured and PDS just covers local AD forest.</returns><remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.AddSupportedForest(AdmPwd.Types.PdsEndpoint,AdmPwd.Types.SupportedForest)">
            <summary>
      Calls PDS to add new AD forest to list of supported forests.
    </summary><param name="Pds">
      Identifies PDS instance that will be target of the operation. If operating more intances of PDS, supported AD forest must be added to each of them, so as PDS configuration is consistent across all instances.
    </param><param name="Forest">
      Specifies parameters of the newly supported forest
    </param><returns>Newly added supported forest.</returns><remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.SetSupportedForest(AdmPwd.Types.PdsEndpoint,AdmPwd.Types.SupportedForest)">
            <summary>
      Calls PDS to update supported forest parameters (typically connection credentials).
    </summary><param name="Pds">
      Identifies PDS instance to perform the operation on. If operating more intances of PDS, update must be performed on each of them to ensure consistency of configuration across all instances of PDS.
    </param><param name="Forest">
      Specifies parameters to be updated on the forest
    </param><returns>Updated supported forest.</returns><remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.RemoveSupportedForest(AdmPwd.Types.PdsEndpoint,AdmPwd.Types.SupportedForest)">
            <summary>
      Calls PDS to add remove AD forest from list of supported forests.
    </summary><param name="Pds">
      Identifies PDS instance to remove the forest from list of supported forests. If operating more intances of PDS, supported AD forest must be removed from each of them.
    </param><param name="Forest">
      Specifies parameters of the removed forest. Only DNS name of Forest is used to identify forest to be removed.
    </param><returns>Removed forest.</returns><remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.AddSidMapping(AdmPwd.Types.PdsEndpoint,AdmPwd.Types.SidMapping)">
            <summary>
      Calls PDS to add maping of security principal from untrusted forest to security principal from trusted forest.
    </summary><param name="Pds">
      Identifies PDS instance to work with. If operating more intances of PDS, SID mapping must be added to each of them to ensure configuration consistency.
    </param><param name="Mapping">
      Specifies parameters of the SID mapping.
    </param><returns /><remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.UpdateSidMapping(AdmPwd.Types.PdsEndpoint,AdmPwd.Types.SidMapping)">
            <summary>
      Calls PDS to modify maping of security principal from untrusted forest to security principal from trusted forest.
    </summary><param name="Pds">
      Identifies PDS instance to work with. If operating more intances of PDS, SID mapping must be updated on each of them to ensure configuration consistency.
    </param><param name="Mapping">
      Specifies parameters of the SID mapping.
    </param><returns /><remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetSidMapping(AdmPwd.Types.PdsEndpoint)">
            <summary>
      Calls PDS to get configured mapings of security principal from untrusted forest to security principal from trusted forest.
    </summary><param name="Pds">
      Identifies PDS instance to work with.
    </param><returns>List of configured SID mappings</returns><remarks>
      <para>Can be called by any authenticated user</para>
      <para>Call is not audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.RemoveSidMapping(AdmPwd.Types.PdsEndpoint,System.Security.Principal.SecurityIdentifier)">
            <summary>
      Calls PDS to add remove SID mappings from list of mappings.
    </summary><param name="Pds">
      Identifies PDS instance to remove the mapping from. If operating more intances of PDS, mapping must be removed from each of them.
    </param><param name="PrimarySid">
      Specifies Primary SID of mapping to be removed.
    </param><returns /><remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.AddManagedAccountsContainer(AdmPwd.Types.PdsEndpoint,AdmPwd.Types.ManagedAccountsContainer)">
            <summary>
      Calls PDS to add AD container with accounts with automatically managed password.
    </summary><param name="Pds">
      Identifies PDS instance to work with. If operating more intances of PDS, container must be added to configuration of each of them to ensure configuration consistency.
    </param><param name="Container">
      Specifies parameters of password for accounts located in AD container.
    </param><returns /><remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.SetManagedAccountsContainer(AdmPwd.Types.PdsEndpoint,AdmPwd.Types.ManagedAccountsContainer)">
            <summary>
      Calls PDS to update configuration of AD container with accounts with automatically managed password.
    </summary><param name="Pds">
      Identifies PDS instance to work with. If operating more intances of PDS, container must be updated on each of them to ensure configuration consistency.
    </param><param name="Container">
      Specifies parameters of password for accounts located in given AD container.
    </param><returns /><remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetManagedAccountsContainer(AdmPwd.Types.PdsEndpoint)">
            <summary>
      Calls PDS to retrieve configuration of AD containers with accounts with automatically managed password.
    </summary><param name="Pds">
      Identifies PDS instance to work with.
    </param><returns>List of managed domain acocunts containers as defined in PDS configuration file.</returns><remarks>
      <para>Can be called by any authenticated user</para>
      <para>Call is not audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.RemoveManagedAccountsContainer(AdmPwd.Types.PdsEndpoint,System.String)">
            <summary>
      Calls PDS to remove AD container with accounts with automatically managed password from PDS configuration.
    </summary><param name="Pds">
      Identifies PDS instance to work with. If operating more intances of PDS, container must be removed from each of them to ensure configuration consistency.
    </param><param name="DN">
      Specifies distinguishedName of container to be removed from configuration.
    </param><returns /><remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetPdsAdminRoleName(AdmPwd.Types.PdsEndpoint)">
            <summary>
      Calls PDS to retrieve name of AD group that implements PDS Admin role. Members of the group hold PDS Admin role and can manage configuration of PDS.
    </summary><returns>Returns name of AD group that is configured as PDS Admin role group</returns><remarks>
      <para>By default, this role is held by Enterprise Admins group. Role assignment can be changed in PDS configuration file.</para>
      <para>No specific permissions required</para>
      <para>Call is not audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.TransferPdsAdminRole(AdmPwd.Types.PdsEndpoint,System.String)">
            <summary>
      Transfers PDS Admin role to security principal (user or group)
    </summary><param name="Pds">
      <para>Identifies PDS instance to work with.</para>
      <para>Important: If operating more intances of PDS, configuration change must be performed on each of them to ensure configuration consistency.</para>
    </param><param name="NewRoleHolder">
      Name of new holder of PDS Admin role. Should include domain name.
    </param><returns /><remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.UpdateManagedAccountsParameters(AdmPwd.Types.PdsEndpoint,System.Nullable{System.UInt32})">
            <summary>
      Updates global configuration of managed domain accounts processing.<br />
      Note: Currently, only global parameter supported is interval of scanning of managed domain accounts for password expiration.
    </summary><param name="Pds">
      <para>Identifies PDS instance to work with.</para>
      <para>Important: If operating more intances of PDS, configuration change must be performed on each of them to ensure configuration consistency.</para>
    </param><param name="ManagementInterval">
      Interval of scanning of managed domain accounts for password expiration.
    </param><returns /><remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetManagedAccountsParameters(AdmPwd.Types.PdsEndpoint)">
            <summary>
      Returns global configuration of managed domain accounts processing.<br />
      Note: Currently, only global parameter supported is interval of scanning of managed domain accounts for password expiration.
    </summary><param name="Pds">
      Identifies PDS instance to work with.
    </param><returns>Global configuration of managed domain accounts processing.</returns><remarks>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetDnsParameters(AdmPwd.Types.PdsEndpoint)">
            <summary>
      Returns parameters of DNS registration for PDS autodiscover SRV records.
    </summary><param name="Pds">
      Identifies PDS instance to work with.
    </param><returns>
      <see cref="T:AdmPwd.Types.DnsParameters" /> object.
    </returns><remarks>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.UpdateDnsParameters(AdmPwd.Types.PdsEndpoint,System.Nullable{System.Byte},System.Nullable{System.Int32},System.Nullable{System.UInt16},System.Nullable{System.Boolean},System.Nullable{System.Byte})">
            <summary>
      Updates parameters of DNS registration for PDS autodiscover SRV records.
    </summary><param name="Pds">
      <para>Identifies PDS instance to work with.</para>
      <para>Important: If operating more intances of PDS, configuration change must be performed on each of them to ensure configuration consistency.</para>
    </param><param name="Priority">Priority of SRV record. Null means default, which is 100.</param><param name="RegistrationInterval">How often PDS service re-registers autodiscover record to prevent its expiration. Null means default, which is 86400 seconds (1 day).</param><param name="Ttl">Time-to-live for registered SRV record. Null means default, which is 1200 seconds (20 minutes)</param><param name="UnregisterOnShutdown">Whether or not the SRV record shall be unregistered then services stops, to prevent autodiscover records pointing to non-operating PDS instance. Null means default, which is 'true'</param><param name="Weight">Weight of registered SRV record.<br />
    Note: Weight is not used by the solution.
    </param><returns>
    </returns><remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.UpdateAccessControlParameters(AdmPwd.Types.PdsEndpoint,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Security.Principal.SecurityIdentifier[])">
            <summary>
      Updates parameters of access control process for password reads and resets.
    </summary><param name="Pds">
      <para>Identifies PDS instance to work with.</para>
      <para>Important: If operating more intances of PDS, configuration change must be performed on each of them to ensure configuration consistency.</para>
    </param><param name="HonorAllExtendedRightsPermission">Whether 'All extended rights' permission also includes 'Read password' and 'Reset password' permission.Null means default, which is 'false'.</param><param name="HonorFullControlPermission">Whether 'Full control' permission also includes 'Read password' and 'Reset password' permission.Null means default, which is 'false'.</param><param name="HonorLocalGroupsFromRemoteComputerDomain">
      <para>
        Whether PDS also evaluates membership in local groups from remote domain.
      </para>
      <para>
        Consider the following scenario:
        <list>
          <item>PDS is installed in forest domain A</item>
          <item>Computer account X we want know admin password for is in forest domain B</item>
          <item>User U who wants to know admin password for computer X is also in forest domain B</item>
          <item>User U is member of Domain local group DLG</item>
          <item>Permission to read the admin password for computer X is delegated to group DLG</item>
        </list>
        In this case, when PDS is performing access check, it normally does NOT see user U being member of group DLG (because membership in Domain Local groups is not propagated to other domains in forest), and because of that, it replies with AccessDenied error. Setting this parameter to true makes PDS to perform direct lookup for local group membership of user in his home domain to make sure that complete membership is evaluated. 
        This additional lookup consumes PDS service resources and requires direct connection between PDS and domain controller of user's domain, so delegation using domain Local groups in multi-forest domains should be avoided.
      </para>
    </param><param name="MandatoryGroupSids">List of Security Identifiers (SIDs) that caller additionally must be member of for calls to password reads/resets to succeed. Membership in such groups is then additional gate that allows to perform active operations. If multiple groups specified, user must be member of at least 1 of them. This helps implement additional levels of access control, such as JIT of Authentication Mechanism Assurance (AMA)</param><returns>
    </returns><remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetAccessControlParameters(AdmPwd.Types.PdsEndpoint)">
            <!-- No matching elements were found for the following include tag --><include file="..\\Docs\PdsConfigWrapper.xml" path="PdsConfigWrapper/GetAccessControlParameters/*" />
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetLicenseParameters(AdmPwd.Types.PdsEndpoint)">
            <summary>
      Returns parameters of current license, including path to license file.
    </summary><param name="Pds">
      Identifies PDS instance to work with.
    </param><returns>
      <see cref="T:AdmPwd.Types.LicenseParameters" /> object.
    </returns><remarks>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.UpdateLicenseFilePath(AdmPwd.Types.PdsEndpoint,System.String)">
            <summary>
      Updates path to license file.
    </summary><param name="Pds">
      Identifies PDS instance to work with.
    </param><param name="FilePath">
      Absolute or relative path to license file that Pds instance shall use.
    </param><returns>
      <see cref="T:AdmPwd.Types.LicenseParameters" /> object.
    </returns><remarks>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GenerateKeyPair(System.Int32)">
            <summary>
       <para>Calls PDS to generate new RSA key pair.</para>
       <para>
        PDS keeps private key of key pair in own storage and uses it for password decryption.
         Public key is put to GPO by an administrator and managed machines use it to encrypt the password of managed local admin account when reporting it to AD.
      </para>
       <para>PDS also uses public key to encrypt password of managed domain account - ID of key to use is specified in PDS configuration file.</para>
    </summary><param name="KeySize">
      Specifies desired RSA key size<br />
       Key size must be one of those allowed by PDS - see <see cref="M:AdmPwd.PDSUtils.PdsWrapper.GetSupportedKeySizes" /> method
    </param><returns>Return public key of newly generated key pair, along with key ID assigned to newly generated key pair</returns><remarks>
       <para>Caller must have Key Admin role. For callers without role, AccessDenied exception is thrown. To find out, if caller has Key Admin role, call method <see cref="M:AdmPwd.PDSUtils.PdsWrapper.IsPDSAdmin" />.</para>
       <para>By default, Key Admin role is assigned to Enterprise Admins group and can be changed via PDS configuration file.</para>
       <para>Call is audited on PDS</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetPublicKey(System.UInt32)">
            <summary>
       Asks PDS to return public key with specified key ID
    </summary><param name="KeyId">Identifies key pair for which public key is returned</param><returns>Returns public key of key pair with given KeyID, along with key ID</returns><remarks>
       <para>No specific permissions required</para>
       <para>Call is not audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetPublicKeys">
            <summary>
       Asks PDS to return public keys for all available key pairs.
    </summary><returns>Returns list of all public keys managed by PDS, along with type of the key, size in bits, and key ID</returns><remarks>
       <para>No specific permissions required</para>
       <para>Call is not audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetPassword(System.String,System.String,AdmPwd.Types.IdentityType,System.Boolean,System.Boolean)">
            <summary>
       Calls PDS to retrieve password of managed account in given AD forest.
       Managed account can be either:
         * Domain computer local admin account
         * Managed domain account
    </summary><param name="ForestName">
      Name of AD forest.
       Forest must be marked as supported in PDS configuration.
       For local forest, pass null as parameter value
    </param><param name="Identity">
       When retrieving password of computer local admin account, pass name of computer where password of local admin account shall be retrieved. Name of the computer can be passed as one of the following:
       * Hostname, such as MyComputer
       * FQDN, such as mycomputer.mydomain.com
       * Distinguished name, such as cn=MyComputer,ou=MyComputers,dc=mydomain,dc=com
       <para />
       When retrieving password of managed domain account, pas the name of domain account. Account name can be passed as one of the following:
       * sAMAccountName (without domain)
       * userPrincipalName
       * distinguishedName
     </param><param name="Type">
       Type of the account to retrieve password for. Can be one of the supported account types:
       * LocalComputerAdmin
       * ManagedDomainAccount
     </param><param name="IncludePasswordHistory">Whether or not to include password history</param><param name="IsDeleted">
      Whether computer account or managed domain account is deleted or not.
      Note: there may be multiple deleted objects with the same name. In such case, password for most recently deleted object is returned
    </param><returns>Password, current password expiration time and optional password history. Passwords returned are plain text</returns><remarks>
       <para>Name of local admin account is not stored by solution. Caller is expected to know name of local managed account</para>
       <para>
        PDS does not try to guess domain or forest name from computer name - it searches against Global Catalog interface of AD forest passed in <paramref name="ForestName" /> parameter
      </para>
       <para>Caller must have Read Admin Passsword permission on given computer or user object</para>
       <para>Call is audited on PDS</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.ResetPassword(System.String,System.String,AdmPwd.Types.IdentityType,System.DateTime)">
            <summary>
       Calls PDS to request reset of for given managed account in given AD forest.
       Managed account can be either:
       * Domain computer local admin account
       * Managed domain account
     </summary><param name="ForestName">
      Name of AD forest.
       Forest must be marked as supported in PDS configuration.
       For local forest, pass null as parameter value
     </param><param name="Identity">Name of computer where password of local admin account shall be reset</param><param name="Type">
      Type of the managed account to reset password for. Can be one of the supported account types:
      * LocalComputerAdmin
      * ManagedDomainAccount
     </param><param name="WhenEffective">When password reset shall occur.
     If type of account is local computer admin account, then password will be reset during next GPO update cycle on given computer after this time.
     If type of account is managed domain account, and WhenEffective is in the past, then password is reset immediately. If WhenEffective is in the future, then password will be scheduled for reset according to WhenEffective parameter.
     </param><returns>Information about result of operation along with computer name and computer DN</returns><remarks>
       <para>Caller must have Reset Admin Passsword permission on given computer or user object</para>
       <para>Call is audited on PDS</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.IsPDSAdmin">
            <summary>
       Calls PDS to return information whether or not the caller is in Key Admin role on PDS
    </summary><returns>True if caller is in Key Admin role on PDS. Otherwise returns false.</returns><remarks>
       <para>Can be used by various client tools to properly render UI and allow users in KeyAdmin role to see key pair management UI</para>
       <para>No specific permissions required</para>
       <para>Call is not audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetSupportedKeySizes">
            <summary>
       Calls PDS to retrieve key sizes supported by PDS.
    </summary><returns>List of supported key sizes, in bits</returns><remarks>
       <para>
        PDS only creates key pairs of supported sizes; however it can decrypt passwords encrypted by any valid RSA key - see <see cref="M:AdmPwd.PDSUtils.PdsWrapper.GenerateKeyPair(System.Int32)" /> method to see how to generate new key pair
      </para>
       <para>Supported key sizes are configured in PDS configuration file.</para>
       <para>RSA CSP used by solution supports key sizes up to 16384 bits in 8-bit increments on Windows OS.</para>
       <para>No specific permissions required</para>
       <para>Call is not audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetUserPermissions(System.String,System.String,System.String)">
            <summary>
       Calls PDS to retrieve information about AdmPwd.E permissions that given user has on computer object, as seen by PDS
    </summary><param name="ForestName">
      Name of AD forest.
       Forest must be marked as supported in PDS configuration.
       For local forest, pass null as parameter value
    </param><param name="ComputerName">Name of computer where password of local admin account shall be reset</param><param name="UserUpn">UserPrincipalName of user in question.</param><returns>List of solution specific permissions PDS finds for given user for given computer object </returns><remarks>
       <para>This method uses Kerberos S2U4Self logon to obtain user's Kerberos ticket with security group membership of user account in question</para>
       <para>No specific permissions required</para>
       <para>Call is not audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetEnvironmentStats">
            <summary>
       Calls PDs to retrieve environment status for managed environment:
       * List of domains in each managed forest, along with number of managed machines and domain accounts in each domain
       * Overall status for each AD forest, including license expiration and consumption
    </summary><returns>Environment status for the solution</returns><remarks>
       <para>No specific permissions required</para>
       <para>Call is not audited</para>
    </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetSupportedForestNames">
            <summary>
       Asks PDS to return list of all supported AD forests.
    </summary><returns>
       Returns list of names of all supported AD forests.
      <para>In single forest deployments, list is empty, meaning that only supported forest is the forest where solution is deployed.</para>
     </returns><remarks>
       <para>No specific permissions required</para>
       <para>Call is not audited</para>
    </remarks>
        </member>
        <member name="T:AdmPwd.Types.IdentityType">
            <summary>
            Type of object supported by solution. Distingushes operation target for various operations.
            Can be one of the following:
            <para/>Local computer admin account
            <para/>Managed domain account
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IdentityType.LocalComputerAdmin">
            <summary>
            Local computer admin account identity type
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IdentityType.ManagedDomainAccount">
            <summary>
            Managed domain acocunt identity type
            </summary>
        </member>
        <member name="T:AdmPwd.Types.PasswordResetState">
            <summary>
            Status codes of password reset operation
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PasswordResetState.PasswordReset">
            <summary>
            Successful password reset
            </summary>
        </member>
        <member name="T:AdmPwd.Types.PublicKey">
            <summary>
            Public key information
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PublicKey.ID">
            <summary>
            ID of the key pair
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PublicKey.Key">
            <summary>
            Public key blob encoded in Base64 format
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PublicKey.Size">
            <summary>
            Size of the key in bits
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PublicKey.Type">
            <summary>
            Type of the key. Currently supported types are CryptoAPI_RSA and CNG_RSA.
            </summary>
        </member>
        <member name="M:AdmPwd.Types.PublicKey.#ctor(System.UInt32,System.String,System.Int32,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="id">ID of the key</param>
            <param name="key">Public key blob encoded as Base64 string</param>
            <param name="size">Size of the key in bits</param>
            <param name="type">Type of the key</param>
        </member>
        <member name="T:AdmPwd.Types.UserPermissionStats">
            <summary>
            Summary of solution specific permissions user has on AD computer object
            </summary>
        </member>
        <member name="P:AdmPwd.Types.UserPermissionStats.UserName">
            <summary>
            Name of user
            </summary>
        </member>
        <member name="F:AdmPwd.Types.UserPermissionStats.Permissions">
            <summary>
            List of permissions
            </summary>
        </member>
        <member name="M:AdmPwd.Types.UserPermissionStats.#ctor(System.String)">
            <summary>
            Constructs the object
            </summary>
            <param name="user">Name of the user</param>
        </member>
        <member name="T:AdmPwd.Types.PermissionEntry">
            <summary>
            Permission entry for user on given AD object
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PermissionEntry.AccessType">
            <summary>
            Allow or Deny
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PermissionEntry.PermissionType">
            <summary>
            Read or Reset password or Full Control
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PermissionEntry.Identity">
            <summary>
            Which security principal gives the permission. Can be either user account directly or group a user is member of
            </summary>
        </member>
        <member name="M:AdmPwd.Types.PermissionEntry.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="accType">Access type for permission entry</param>
            <param name="permType">Permission type</param>
            <param name="id">Identity that has the permission</param>
        </member>
        <member name="T:AdmPwd.Types.KeySize">
            <summary>
            RSA key size information
            </summary>
        </member>
        <member name="P:AdmPwd.Types.KeySize.Size">
            <summary>
            Size of RSA key in bits
            </summary>
        </member>
        <member name="M:AdmPwd.Types.KeySize.#ctor(System.Int32)">
            <summary>
            Constuctor
            </summary>
            <param name="size">Size of the key in bits (such as 2048)</param>
        </member>
        <member name="T:AdmPwd.Types.Role">
            <summary>
            Descriptor of PDS role
            </summary>
        </member>
        <member name="P:AdmPwd.Types.Role.Name">
            <summary>
            Name of the role.
            <para/>Currently, only KeyAdmin role is returned
            </summary>
        </member>
        <member name="M:AdmPwd.Types.Role.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="name">Name of the role</param>
        </member>
        <member name="T:AdmPwd.Types.PasswordResetStatus">
            <summary>
            Descriptor of Reset password operation.
            Returned by the following cmdlets:
            <para/>  Reset-AdmPwdPassword
            <para/>  Reset-AdmPwdManagedAccountPassword
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PasswordResetStatus.Name">
            <summary>
            Name of user or computer for which was reset performed
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PasswordResetStatus.DistinguishedName">
            <summary>
            DistinguishedName of computer account or managed domain user account
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PasswordResetStatus.Status">
            <summary>
            Result of operation
            </summary>
        </member>
        <member name="M:AdmPwd.Types.PasswordResetStatus.#ctor(System.String,System.String,AdmPwd.Types.PasswordResetState)">
            <summary>
            Default constructor
            </summary>
            <param name="accountName">Name of the computer or user account from request</param>
            <param name="dn">DistinguishedName of computer or user account</param>
            <param name="state">Result of operation</param>
        </member>
        <member name="T:AdmPwd.Types.PasswordInfo">
            <summary>
            Structure that contains information about password of managed object and password history (if present on object)
            Returned by the following cmdlets:
            <para/>    Get-AdmPwdPassword
            <para/>    Get-AdmPwdManagedAccountPassword
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PasswordInfo.Name">
            <summary>
            Name of object
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PasswordInfo.DistinguishedName">
            <summary>
            DistinguishedName of object
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PasswordInfo.ExpirationTimestamp">
            <summary>
            Expiration time of password
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PasswordInfo.KeyId">
            <summary>
            ID of RSA key that was used to encrypt the password
            <para/>0 means that password is not encrypted in AD
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PasswordInfo.Password">
            <summary>
            Password of managed account - local admin account on managed computer or managed domain account
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PasswordInfo.PasswordHistory">
            <summary>
            Password history information
            </summary>
        </member>
        <member name="M:AdmPwd.Types.PasswordInfo.#ctor(System.String,System.String,System.DateTime,System.UInt32,System.String)">
            <summary>
            Constructs the object
            </summary>
            <param name="name">Name of account password is for
            <para>For domain user accounts pass userPrincipalName</para>
            <para>For local admin accounts pass computer name</para>
            </param>
            <param name="dn">Distinguished name of object password is for. Computer object or Domain User account.</param>
            <param name="expiration">Expiration time of password</param>
            <param name="keyId">Id of key that was used to encrypt the password stored in AD</param>
            <param name="password">Password itself</param>
        </member>
        <member name="T:AdmPwd.Types.PasswordHistory">
            <summary>
            Descriptor of password history. Password stored as plain text
            <para/>Returned as a member of <see cref="T:AdmPwd.Types.PasswordInfo"/> class
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PasswordHistory.ValidSince">
            <summary>
            When password started to be valid
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PasswordHistory.ValidUntil">
            <summary>
            When password was reset/replaced
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PasswordHistory.KeyId">
            <summary>
            ID of RSA key that was used to encrypt the password
            <para/>0 means that if password is not encrypted in AD
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PasswordHistory.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="M:AdmPwd.Types.PasswordHistory.ToString">
            <summary>
            Overriden to better show data in PowerShell
            </summary>
            <returns>Password string in plain text</returns>
        </member>
        <member name="M:AdmPwd.Types.PasswordHistory.#ctor(System.DateTime,System.DateTime,System.UInt32,System.String)">
            <summary>
            Constructs the object.
            </summary>
            <param name="from">When password started to be valid</param>
            <param name="to">When passord was replaced by newer one.</param>
            <param name="keyId">Id of key that was used to encrypt the password</param>
            <param name="password">Password itself</param>
        </member>
        <member name="T:AdmPwd.Types.EnvironmentStatus">
            <summary>
            Descriptor of environment status
            </summary>
        </member>
        <member name="F:AdmPwd.Types.EnvironmentStatus.Domains">
            <summary>
            List of managed domains
            </summary>
        </member>
        <member name="P:AdmPwd.Types.EnvironmentStatus.LicensedMachines">
            <summary>
            License information: How many machines are licensed
            </summary>
        </member>
        <member name="P:AdmPwd.Types.EnvironmentStatus.MachineLicenseUsage">
            <summary>
            Percentage of license consumption
            </summary>
        </member>
        <member name="P:AdmPwd.Types.EnvironmentStatus.LicensedManagedAccounts">
            <summary>
            License information: How many managed domain accounts are licensed
            </summary>
        </member>
        <member name="P:AdmPwd.Types.EnvironmentStatus.ManagedAccountsLicenseUsage">
            <summary>
            Percentage of license consumption for managed domain accounts
            </summary>
        </member>
        <member name="P:AdmPwd.Types.EnvironmentStatus.LicenseExpires">
            <summary>
            License information: When license expires
            </summary>
        </member>
        <member name="M:AdmPwd.Types.EnvironmentStatus.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.DateTime)">
            <summary>
            Default constructor
            </summary>
            <param name="licensedMachines">Total amount of licensed machines</param>
            <param name="machineLicenseUsage">Total amount of managed machines</param>
            <param name="licensedAccounts">Total amount of licensed managed domain user accounts</param>
            <param name="accountLicenseUsage">Total amount of managed user accounts</param>
            <param name="licenseExpires">When the license expires</param>
        </member>
        <member name="T:AdmPwd.Types.DomainStatus">
            <summary>
            Class shows status for managed machines and user accounts in particular domain:
            <para/>    Count of all machines that have admin password populated
            <para/>    Count of live machines (changed their password within last 60 days)
            <para/>    Count of managed domain user accounts
            </summary>
        </member>
        <member name="P:AdmPwd.Types.DomainStatus.Name">
            <summary>
            DNS name of domain
            </summary>
        </member>
        <member name="P:AdmPwd.Types.DomainStatus.ManagedMachines">
            <summary>
            Count of managed machines - machines that have local admin password reported in AD and changed its password within last 60 days.
            <para/>Only those machines are counted as license consumers
            </summary>
        </member>
        <member name="P:AdmPwd.Types.DomainStatus.ManagedMachinesTotal">
            <summary>
            Total count of managed machines - all machines that have local admin password reported in AD, regardless whether they're alive or not
            </summary>
        </member>
        <member name="P:AdmPwd.Types.DomainStatus.ManagedAccounts">
            <summary>
            Count of managed domain user accounts - user accounts that have their password managed by PDS
            </summary>
        </member>
        <member name="M:AdmPwd.Types.DomainStatus.ToString">
            <summary>
            Overriden to show more information in PowerShell
            </summary>
            <returns>Name of domain and number of managed machines in domain</returns>
        </member>
        <member name="M:AdmPwd.Types.DomainStatus.#ctor(System.String,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Default constructor
            </summary>
            <param name="name">DNS name of domain</param>
            <param name="managedMachines">Count of managed machines</param>
            <param name="managedMachinesTotal">Total count of managed machines</param>
            <param name="managedAccounts">Count of managed domain user accounts</param>
        </member>
        <member name="T:AdmPwd.Types.AutodiscoverException">
            <summary>
            Exception thrown by PDS autodiscover process
            </summary>
        </member>
        <member name="M:AdmPwd.Types.AutodiscoverException.#ctor(System.String)">
            <summary>
            Default constructor used by autodiscover logic
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="T:AdmPwd.Types.IssueType">
            <summary>
            Type of issue encountered by PDS
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.ComputerNotFound">
            <summary>
            Computer account was not found
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.ComputerAmbiguous">
            <summary>
            Computer name is not unique
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.AccessDenied">
            <summary>
            User does not have a permission to perform given operation
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.KeyAdminRoleNotFound">
            <summary>
            Group that is configured as KeyAdmin role is not found
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.SupportedKeySizesNotFound">
            <summary>
            Supported key sizes configuration element is not configured
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.PublicKeyNotFound">
            <summary>
            Public key with given ID is not found
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.CannotValidateAdminPrivilege">
            <summary>
            Cannot find out whether user holds KeyAdmin role
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.CannotGenerateKeyPair">
            <summary>
            Cannot generate key pair
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.CannotRetrievePassword">
            <summary>
            Cannot retrieve password
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.CannotResetPassword">
            <summary>
            Cannot reset password
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.ComputerNotLicensed">
            <summary>
            Not enough licenses to process the request
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.CannotEvaluateUserPermissions">
            <summary>
            Cannot evaluate user's permissions on given object
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.ForestNotSupported">
            <summary>
            Forest DNS name is not listed as supported AD forest in PDS configuration
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.AccountNotFound">
            <summary>
            Managed domain account was not found
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.AccountAmbiguous">
            <summary>
            Name of managed domain account is not unique
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.AccountNotLicensed">
            <summary>
            Not enough licenses to process the request
            </summary>
        </member>
        <member name="T:AdmPwd.Types.PDSException">
            <summary>
            Contains information about error encountered on PDS side
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PDSException.IssueCode">
            <summary>
            Type of issue
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PDSException.Issue">
            <summary>
            Textual description of issue
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PDSException.Details">
            <summary>
            Detailed information about error
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PDSException.AdditionalInformation">
            <summary>
            <para>Issue specific data. Currently used to return list of AD objects with the same name for <see cref="F:AdmPwd.Types.IssueType.ComputerAmbiguous" /> or <see cref="F:AdmPwd.Types.IssueType.AccountAmbiguous"/> issues.</para>
            <para>In such case, maximum 100 of ambiguous entries is returned in this member.</para>
            </summary>
        </member>
        <member name="M:AdmPwd.Types.PDSException.#ctor(AdmPwd.Types.IssueType,System.String,System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="issueType">Type of issue</param>
            <param name="issue">Description of issue</param>
            <param name="details">Detailed information</param>
            <param name="message">Exception message</param>
            <param name="ex">Inner exception</param>
        </member>
        <member name="T:AdmPwd.Types.SupportedForest">
            <summary>
            Contains details about supported forest configuration
            </summary>
        </member>
        <member name="P:AdmPwd.Types.SupportedForest.ForestName">
            <summary>
            DNS name of AD forest
            </summary>
        </member>
        <member name="P:AdmPwd.Types.SupportedForest.User">
            <summary>
            Credential to use by PDS when connecting to the forest
            </summary>
        </member>
        <member name="P:AdmPwd.Types.SupportedForest.KeyId">
            <summary>
            ID of encryption key that was used to encrypt the password in config file
            </summary>
        </member>
        <member name="P:AdmPwd.Types.SupportedForest.OverrideForestName">
            <summary>
            Keep it on false unless you know what you're doing
            </summary>
        </member>
        <member name="M:AdmPwd.Types.SupportedForest.#ctor(System.String,System.Net.NetworkCredential,System.Nullable{System.UInt32},System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="name">Dns name of the forest</param>
            <param name="credential">Credential used by PDS to connect to forest</param>
            <param name="keyId">ID of key used to protect password of credential in config file</param>
            <param name="overrideForestName">When set to true, and configured forest name differs from real name, ignore real forest name and always use configured one</param>
        </member>
        <member name="T:AdmPwd.Types.PasswordComplexity">
            <summary>
            Defines password complexity levels
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PasswordComplexity.Large">
            <summary>
            Only capital letters
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PasswordComplexity.LargeSmall">
            <summary>
            Capital and small letters
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PasswordComplexity.LargeSmallNum">
            <summary>
            Capitals and small letters, plus numbers
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PasswordComplexity.LargeSmallNumSpec">
            <summary>
            Capitals and small letters, plus numbers, plus special chars
            </summary>
        </member>
        <member name="T:AdmPwd.Types.ManagedAccountsContainer">
            <summary>
            Represents configuration of AD container that stores managed domain accounts
            </summary>
        </member>
        <member name="P:AdmPwd.Types.ManagedAccountsContainer.DN">
            <summary>
            DistingushedName of the container
            </summary>
        </member>
        <member name="P:AdmPwd.Types.ManagedAccountsContainer.PasswordAge">
            <summary>
            Desired max password age to automatically change it
            </summary>
        </member>
        <member name="P:AdmPwd.Types.ManagedAccountsContainer.Complexity">
            <summary>
            Required password complexity
            </summary>
        </member>
        <member name="P:AdmPwd.Types.ManagedAccountsContainer.PasswordHistoryLength">
            <summary>
            How many records to keep in password history
            </summary>
        </member>
        <member name="P:AdmPwd.Types.ManagedAccountsContainer.PasswordLength">
            <summary>
            Required length of password, in chars
            </summary>
        </member>
        <member name="P:AdmPwd.Types.ManagedAccountsContainer.KeyId">
            <summary>
            KeyId for password encryption.<br/>
            If not specified, PDS automatically choses latest key.
            </summary>
        </member>
        <member name="M:AdmPwd.Types.ManagedAccountsContainer.#ctor(System.String,System.UInt32,System.UInt32,AdmPwd.Types.PasswordComplexity,System.UInt32,System.Nullable{System.UInt32})">
            <summary>
            Default constructor
            </summary>
            <param name="dn">DistingushedName of the container</param>
            <param name="passwordAge">Desired max password age before rotating it</param>
            <param name="pwdComplexity">Required password complexity</param>
            <param name="pwdHistoryLength">How many records to keep in password history</param>
            <param name="pwdLength">Required length of password, in chars</param>
            <param name="keyId">KeyId for password encryption. Pass null to let PDS choose latest one</param>
        </member>
        <member name="T:AdmPwd.Types.SidMapping">
            <summary>
            Contains information about how to map SIDs from untrusted forest during access checks.<br/>
            Identity from untrusted forest must be mapped explicitly to user from AD forest where PDS is installed (or any other trusted forest)<br/>
            When calling PDS interface, SID mappings help to validate caller's permissions on objects in untrusted forests.
            </summary>
        </member>
        <member name="P:AdmPwd.Types.SidMapping.PrimarySid">
            <summary>
            SID from untrusted forest that is granted permissions to read/reset passwords there.
            </summary>
        </member>
        <member name="P:AdmPwd.Types.SidMapping.MappedSid">
            <summary>
            SID from PDS forest that typically represents caller
            </summary>
        </member>
        <member name="P:AdmPwd.Types.SidMapping.Description">
            <summary>
            Description of SidMapping entry
            </summary>
        </member>
        <member name="M:AdmPwd.Types.SidMapping.#ctor(System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="primarySid">SID from untrusted forest</param>
            <param name="mappedSid">SID from PDS forest to map primary SID to</param>
            <param name="description">Description of mapping</param>
        </member>
        <member name="T:AdmPwd.Types.ManagedAccountsParameters">
            <summary>
            Parameters of managed domain accounts
            </summary>
        </member>
        <member name="P:AdmPwd.Types.ManagedAccountsParameters.ManagementInterval">
            <summary>
            How often are managed domain accounts checked for expiration, in seconds
            </summary>
        </member>
        <member name="M:AdmPwd.Types.ManagedAccountsParameters.#ctor(System.UInt32)">
            <summary>
            Default constructor
            </summary>
            <param name="managementInterval">How often are managed domain accounts checked for expiration, in seconds</param>
        </member>
        <member name="T:AdmPwd.Types.DnsParameters">
            <summary>
            Parameters of DNS autodiscover SRV record registered by instance of PDS
            </summary>
        </member>
        <member name="P:AdmPwd.Types.DnsParameters.Priority">
            <summary>
            Priority of SRV record
            </summary>
        </member>
        <member name="P:AdmPwd.Types.DnsParameters.Weight">
            <summary>
            Weight of SRV record
            </summary>
        </member>
        <member name="P:AdmPwd.Types.DnsParameters.Ttl">
            <summary>
            TTL of SRV record
            </summary>
        </member>
        <member name="P:AdmPwd.Types.DnsParameters.RegistrationInterval">
            <summary>
            How often should PDS re-register the SRV record in DNS to prevent its expiration. 
            0 ... SRV record is not registered.
            </summary>
        </member>
        <member name="P:AdmPwd.Types.DnsParameters.UnregisterOnShutdown">
            <summary>
            Whether or not PDS autodiscover SRV record shall be removed from DNS when PDS instance stops.
            </summary>
        </member>
        <member name="M:AdmPwd.Types.DnsParameters.#ctor(System.Byte,System.UInt16,System.UInt16,System.Int32,System.Boolean)">
            <summary>
            Default consructor
            </summary>
            <param name="priority">Priority of SRV record</param>
            <param name="weight">Weight of SRV record</param>
            <param name="registrationInterval">How often should PDS re-register the SRV record in DNS</param>
            <param name="ttl">TTL of SRV record</param>
            <param name="unregOnShutdown">Whether PDS removes registered DNS record on service shutdown</param>
        </member>
        <member name="T:AdmPwd.Types.AccessControlParameters">
            <summary>
            Parameters of access control logic that is pwerformed every time PDS decides whether or not to allow password read or reset.
            </summary>
        </member>
        <member name="P:AdmPwd.Types.AccessControlParameters.HonorAllExtendedRights">
            <summary>
            Whether or not 'All Extended Rights' shall allow password read or reset
            </summary>
        </member>
        <member name="P:AdmPwd.Types.AccessControlParameters.HonorFullControl">
            <summary>
            Whether or not 'Full Control' shall allow password read or reset
            </summary>
        </member>
        <member name="P:AdmPwd.Types.AccessControlParameters.HonorLocalGroupsFromRemoteComputerDomain">
            <summary>
            Whether to include local group membership from user's domain (when it's different from PDS domain) to consideration when prforming access check.
            </summary>
        </member>
        <member name="F:AdmPwd.Types.AccessControlParameters.MandatoryGroups">
            <summary>
            SIDs of mandatory groups that caller must be member of so as password reads/resets are allowed
            </summary>
        </member>
        <member name="M:AdmPwd.Types.AccessControlParameters.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Security.Principal.SecurityIdentifier[])">
            <summary>
            Default constructor
            </summary>
            <param name="honorAllExtended">Whether or not 'All Extended Rights' shall allow password read or reset</param>
            <param name="honorFullControl">Whether or not 'Full Control' shall allow password read or reset</param>
            <param name="honorRemoteLocalGroups">Whether to consider membership in local groups from computer domain during access check</param>
            <param name="mandatoryGroups">SIDs of mandatory groups that caller must be member of</param>
        </member>
        <member name="T:AdmPwd.Types.LicenseParameters">
            <summary>
            License parameters
            </summary>
        </member>
        <member name="P:AdmPwd.Types.LicenseParameters.LicenseFilePath">
            <summary>
            Path to license file as configured on PDS server
            </summary>
        </member>
        <member name="P:AdmPwd.Types.LicenseParameters.ExpiresOn">
            <summary>
            When current license expires
            </summary>
        </member>
        <member name="P:AdmPwd.Types.LicenseParameters.LicensedSeats">
            <summary>
            How many computers are licensed for local admin password management
            </summary>
        </member>
        <member name="P:AdmPwd.Types.LicenseParameters.LicensedManagedAccounts">
            <summary>
            How many domain accounts are licensed for management
            </summary>
        </member>
        <member name="P:AdmPwd.Types.LicenseParameters.Forest">
            <summary>
            DNS name of AD forest license is bound to
            </summary>
        </member>
        <member name="M:AdmPwd.Types.LicenseParameters.#ctor(System.String,System.DateTime,System.UInt32,System.UInt32,System.String)">
            <summary>
            
            </summary>
            <param name="licenseFile">Path to license file on PDS server</param>
            <param name="expiration">When current license expires</param>
            <param name="machines">How many computers are licensed</param>
            <param name="domainAccounts">How many domain accounts are licensed</param>
            <param name="forest">DNS name of AD forest license is bound to</param>
        </member>
        <member name="T:AdmPwd.Types.PdsEndpoint">
            <summary>
            Information about discovered PDS instance
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PdsEndpoint.ServicedForest">
            <summary>
            Which AD forest this endpoint is servicing. Useful for management tools that want to operate against various forests (such as machines of vendors working for multiple customers)
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PdsEndpoint.Host">
            <summary>
            Hostname of PDS server
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PdsEndpoint.Port">
            <summary>
            TCP and UDP port where PDS listens to requests
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PdsEndpoint.Priority">
            <summary>
            SRV record priority<br/>
            Note: For PDS intances discovered from GPO it's always 100.
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PdsEndpoint.Weight">
            <summary>
            SRV record weight<br/>
            Note: For PDS intances discovered from GPO, priority is set according to order they're listed in GPO - entries at the beginning are more preferred.
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PdsEndpoint.TTL">
            <summary>
            SRV record TTL
            Note: For PDS isntances discovered from GPO it's always 1200.
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PdsEndpoint.IsAlive">
            <summary>
            Whether or not the PDS instance seems to be alive
            </summary>
        </member>
        <member name="M:AdmPwd.Types.PdsEndpoint.CompareTo(AdmPwd.Types.PdsEndpoint)">
            <summary>
            Inherited from IComparable. Helps to sort PDS according to priority
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AdmPwd.Types.PdsEndpoint.#ctor(System.String,System.UInt16,System.UInt16,System.UInt16,System.UInt32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="host">PDS hostname</param>
            <param name="port">PDS listening port</param>
            <param name="priority">PDS priority</param>
            <param name="weight">PDS weight. Currently not used</param>
            <param name="ttl">PDS TTL</param>
            <param name="forest">Forest serviced by this instance</param>
        </member>
        <member name="M:AdmPwd.Types.PdsEndpoint.MarkAsAlive">
            <summary>
            Marks PDS endpoint as alive
            </summary>
        </member>
        <member name="M:AdmPwd.Types.PdsEndpoint.MarkAsDead">
            <summary>
            Marks PDS endpoint as dead
            </summary>
        </member>
    </members>
</doc>
